#!/usr/bin/python3

"""Import abbreviation lists to the database"""

import argparse
import csv
from datetime import date
import os
import sys
import parentdir # pylint: disable=W0611
from Externals import get_database_object
import Persistence.log as log

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--verbose', '-v',
                    dest='verbose',
                    help='Output lots of stuff',
                    required=False,
                    default=3,
                    action='count')
args = parser.parse_args()
args.verbose = 50 - args.verbose * 10

log.basicConfig(level=args.verbose, style='{')
log_ = log.getLogger('import-data', fmt='{name}:{levelname} {message}')

database = get_database_object('readwrite')

log_.debug("Purging old data...")
database.cursor.execute("""
    DELETE FROM shortstore
""")

today = date.today().strftime("%Y%m%d")
directory = 'sources'
for f in os.listdir(directory):
    if f[-4:] != '.csv':
        log_.debug("%s is not a csv file", f)
        continue
    quelle = f[:-4]
    log_.info("Processing source %s", quelle)
    with open('{}/{}'.format(directory, f)) as csvfile:
        database.cursor.execute("""
            SELECT
                abk_col,
                name_col,
                kurz_col,
                valid_from_col,
                valid_until_col,
                replace_links,
                delimiter
            FROM
                sources
            WHERE
                source_name = ?
        """,
            (quelle, )
        )
        headers = database.cursor.fetchone()
        if headers is None:
            headers = ['Abk', 'Name', None, None, None, 1, ';']
        log_.debug(tuple(headers))
        reader = csv.DictReader(csvfile, delimiter=headers[6])
        for datum in reader:
            try:
                abk = ' '.join(datum[headers[0]].split())
                name = ' '.join(datum[headers[1]].split())
            except AttributeError as ae:
                log_.critical("%s::%d: %s", csvfile.name, reader.line_num, ae)
                sys.exit(1)
            kurzname = ''
            if not headers[2] is None:
                if datum[headers[2]] is None:
                    kurzname = ''
                else:
                    kurzname = ' '.join(datum[headers[2]].split())
            valid_from = '00000000'
            valid_until = '99999999'
            if not (headers[3] is None or datum[headers[3]] is None):
                if valid_from > today:
                    continue
            if not (headers[4] is None or datum[headers[4]] is None):
                valid_until = datum[headers[4]]
                if valid_until < today:
                    continue
            if headers[5] == 1:
                name = name.replace('.', '\u2024')
            primkey = '{}::{}'.format(quelle, abk)
            database.cursor.execute("""
                INSERT OR REPLACE
                INTO shortstore(
                    id,
                    Abk,
                    Name,
                    Kurzname,
                    gueltigvon,
                    source
                )
                VALUES
                (?,?,?,?,?,?)
            """,
                 (primkey
                , abk
                , name
                , kurzname
                , valid_from
                , quelle
                , )
            )
database.close_sucessfully()
